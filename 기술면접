핀테크 (금융 기술의 합성어)
금융 서비스를 모바일 인터넷 환경으로 옮기는 것 빅데이터(?), 블록체인 기술이 중요
대표적으로 페이팔, 카카오뱅크, 카카오페이 등이있으며
모바일 결제, 모바일 송금, 온라인 개인 자산관리, 크라우드 펀딩등이 있음
조인 (둘 이상의 테이블을 연결해서 데이터를 검색하는 방법 / 하나의 컬럼은 공유하고 있어야함)
Left Join : 부분집합 ( 왼쪽에 있는건 전부)
Right Join : 부분집합 ( 오른쪽에 있는건 전부)
Inner join(내부조인) : 교집합
Outer join(외부조인) : 왼쪽 오른쪽 테이블 모두
Full Outer join : 왼쪽 테이블에만 있거나 오른쪽 테이블에 있는 것만
DB 인덱스 (인덱스는 데이터베이스 테이블에 대한 검색 성능의 속도를 높여주는 자료 구조)
조건검색, 정렬, MIN, MAX에 효율적이다.
DML에 취약하여 DML이 빈번한 테이블보다 검색을 위주로 하는 테이블에 인덱스를 생성하는것이 좋음
정규화 1,2,3, BCNF, 4, 5 (DB의 이상현상의 원인이 되는 중복성을 제거하여 무결성을 보존하는 것)
왠만해서 3정규화까지만 진행함
https://3months.tistory.com/193
https://mozi.tistory.com/110
AI 머신러닝 딥러닝
인공지능: 사람처럼 학습하거나 추론할 수 있는 지능을 가진 컴퓨터 시스템을 만드는 기술 전체
머신러닝: 규칙을 일일이 프로그래밍하지 않아도 컴퓨터가 자동으로 데이터에서 규칙을 학습하는 알고리즘
, 인공지능 중 지능을 구현하기 위한 소프트웨어
딥러닝: 많은 머신러닝 알고리즘 중 인공 신경망(ANN)을 기반으로 한 방법
그러므로 범위의 크기는 인공지능 > 머신러닝 > 딥러닝
마이데이터
2020년 8월부터 데이터 3법이 시행되며 '내 데이터의 주인은 나' 라는 주장을 할 수 있게 되었음, 즉 
'내 데이터는 내가 관리할테니, 내가 지정하는 제 3자에게 내 데이터를 보내달라' 고 요청할 수 있게 되었음
객체지향 프로그래밍 개념 장단점
장점
코드 재사용이 용이  
유지보수가 쉬움(절차지향의 경우 일일이 수정할 부분을 찾아야하지만, 객체지향의 경우 수정할 부분이 대체로 클래스 내부에 있음)
단점
처리속도가 느림,  설계 시 많은 시간이 걸림
절차지향 프로그래밍 (C언어)
순차적인 처리가 중요시되며 프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법
장점 : 컴퓨터의 처리방식과 유사하여 객체지향에 비해 실행속도가 빠름
단점 : 유지보수가 어려움, 코드의  순서에 따라 결과가 바뀜, 디버깅이 어려움
오버라이딩 오버로딩
오버라이딩: 상위 클래스의 메소드의 이름 및 용례가 같은 함수를 하위 클래스에 재정의하는 것을 의미
오버로딩: 두 개 이상의 메소드의 이름이 동일하지만 파라미터의 개수, 타입 등이 다른 경우를 의미
블록체인
블록체인이란 P2P 네트워크를 통해서 관리되는 분산 데이터 베이스의 한 형태로
거래 정보를 담은 장부를 중앙 서버 한 곳에 저장하는것이 아니라 블록체인 네트워크에 연결된 여러 컴퓨터에
저장 및 보관하는 기술로 다양한 분야에 활용이 가능한 기술이다
와어이프레임
웹페이지 및 앱의 윤곽을 2차원으로 보여주는 것
페이지의 구조, 레이아웃, 정보구조, 유저 플로우, 기능, 의도된 동작들에 대한 명확한 개요를 제공
툴 : 미로, 저스트인마인드, 어도비, 피그마 등
DB설계 및 모델링
데이터 모델 : 현실 세계의 정보들을 컴퓨터에 표현하기 쉽게 단순화 추상화하여 표현한 개념적 모델
데이터 모델 종류
1. 개념적 모델 : 현실 세계를 추상적 개념으로 표현
           속성들로 기출된 개체 타입과 이 개체 타입들 간의 관계를 이용하여 현실 세계 표현      
           정보 모델이라고도 하고 대표적으로 E-R 모델
2. 논리적 모델 : 개념적 모델링으로 얻는 개념적 구조를 컴퓨터에 맞도록 변환하는 과정
           필드로 기술된 데이터 타입과 이 데이터 타입들 간의 관계를 이용하여 현실 세계 표현
           데이터 모델이라고 하면 논리적 모델을 뜻함
           하나의 DBMS는 하나의 논리적 데이터 모델
           관계를 어떻게 표현하느냐에 따라 관계 모델, 계층 모델, 네트워크 모델로 구분
3. 물리적 모델 : 
데이터 모델에 표시할 요소
구조 : 논리적으로 표현된 개체 타입들 간의 관계로서 구조 및 정적 성질 표현
연산 : DB에 저장된 실체 데이터를 처리하는 작업에 대한 명세로서 DB를 조작하는 기본 도구
제약 조건 : DB에 저장될 수 있는 실제 데이터의 논리적인 제약 조건
데이터 모델 구성 요소
개체 : DB 표현하려는 것으로 현실 세계의 대상
속성 : 데이터의 가장 작은 논리적 단위로 개체를 구성하는 항목
관계 : 개체 간의 관계 또는 속성 간의 관계
DB설계에서 유의할점
무결성 : 삽입, 삭제, 갱신 등의 연산 후에도 데이터베이스에 저장된 데이터가 정해진 제약조건을 항상 만족
일관성 : 데이터베이스에 저장된 데이터들 사이나 특정 질의에 대한 응답이 처음부터 끝까지 변함없이 일정해야함
회복 : 시스템에 장애가 발생했을 때 장애 발생 직전의 상태로 복구 할 수 있어야 함
보안 : 불법적인 데이터 노출 또는 변경이나 손실로부터 보호할 수 있어야 함
효율성 : 응답시간 단축, 시스템의 생산성, 저장 공간의 최적화 등이 가능 해야 함
데이터베이스 확장 : 데이터베이스 운영에 영향을 주지 않으면서 데이터를 추가할 수 있어야 함
예외처리 
오류가 발생했을 때 오류를 그대로 실행하지 않고 오류에 대응하는 방법을 제시하는 것
진행했던 프로젝트에서는 Request 라이브러리의 status_code를 이용해 if-else문을 이용해서 예외처리를 해주었음 
퍼스널 api key의 특징으로 자주 갱신해줘야하고 요청할 수 있는 횟수가 작게 제한되어있어 요청횟수를 초과할때 발생하는 429와 api key 갱신이 필요할 때 발생하는 403의 대한 예외처리를 해주었음
429는 10초간 일시정지 후 다시 요청을 보내도록 처리를 해주었고 403은 api key 갱신이 필요하다고 출력하도록 처리해줌
예외와 에러의 차이 
에러 : 시스템이 종료되어야 할 수준의 상황과 같이 수습할 수 없는 심각한 문제를 의미, 개발자가 미리 예측하여 방지할 수 없음
Ex) stack overflow : 호출의 깊이가 깊어지거나 재귀가 지속되어 발생시 던져지는 오류
      OutOfMemoryError : JVM이 할당된 메모리의 부족으로 더 이상 객체를 할당할 수 없을때 던져지는 오류
예외 : 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생, 개발자가 미리 예측하여 방지할 수 있음
Ex ) NullPointerExceprion : 객체가 필요한 경우인데 응용프로그램이 null을 사용하려고 시도할 경우
       IllegalArgumentException : 메서드가 허가되지 않거나 부적잘한 argument를 받았을 경우 던져짐
디지털 트랜스포메이션
디지털 트랜스 포메이션이란 기술을 사용해 아날로그 프로세스를 디지털로 전환하는 것을 말함 
파이썬과 자바의 차이점
자바는 정적타이핑 언어이고, 파이썬은 동적타이핑 언어.
정적 타이핑 : 자료형을 컴파일 당시에 결정하는 것
동적 타이핑 : 자료형을 컴파일이 아닌 런타임 시 결정하는 것
변수선언
자바는 변수를 사용하기 위해 데이터 유형을 선언해야함
파이썬은 변수유형을 선언할 필요가 없는 동적유형, 런타임에 의해 유형이 결정 (런타임 : 컴퓨터 프로그램이 실행되고 있는 동안의 동작을 말함) 
코드가독성
자바는 한줄을 출력하기 위해 클래스, 함수를 선언하는 것부터 시작
파이썬은 단 한줄로 출력가능
자바
자바의 철학
1. 객체 지향 방법론 사용해야 함
2. 같은 프로그램이 여러 운영 체제에서 실행 될 수 있어야 한다.
3. 컴퓨터 네트워크 접근 기능이 기본으로 탑재되어 있어야 함
4. 원격 코드를 안전하게 실행할 수 있어야 함
5. 다른 객체 지행 언어들의 좋은 부분만 가지고 와서 사용하기 편해야 함
자바의 특징
- 호환성이 높은 언어 
      자바는 JVM위에서 돌아가기 때문에 운영체제 종류에 상관없이 실행, C언어 같은 경우 운영체제에 종류에 따라 int형의 크기가 달라지기도 함, 자바의 경우 동일한 JVM환경에서 돌아가기 때문에 이런 경우는 없음
- 객체지향 프로그래밍
      하나의 기능을 객체로 만들고, 이러한 객체들을 결합해서 하나의 프로그램을 만듦
- 함수적 스타일 코딩 지원
      함수 프로그래밍을 위해 람다식을 자바 8부터 지원, 람다식을 사용하면 컬렉션 요소를 필터링, 매핑, 집계 처리하는데 쉬워지고 코드가 매우 간결해짐
- 메모리를 자동으로 관리
      C언어는 메모리에 생성된 객체를 제거하기 위해 개발자가 직접 코드를 작성 하지만 자바는 메모리를 자바가 직접 관리, 객체 생성 시 자동으로 메모리 영역을 찾아서 할당, 사용이 완료되면 쓰레기 수집기를 실행시켜 자동적으로 사용하지 않는 객체를 제거
- 다양한 애플리케이션 개발 가능
      JVM을 사용해 다양한 운영체제에서 실행되는 프로그램 개발 가능, 단순 콘솔프로그램, 클라이언트용 윈도우 애플리케이션, 서버용 웹 애플리케이션, 모바일용 안드로이드 앱
- 멀티스레드 구현 가능
      하나의 프로그램이 동시에 여러 작업을 처리해야 하는 경우와 대용량 작업을 빨리 처리하기 ㅜ이해 서브 작업으로 분리해서 병렬 처리하려면 멀티스레드 프로그래밍이 필요, 자바는 쓰레드 생성 및 제어와 관련된 라이브러리 API를 제공하고 있기 때문에 운영체제 관계없이 멀티 스레드 쉽게 구현, 운영체제마다 멀티스레드 이용하는 API다름 자바의 경우 JAVA API를 이용하기 떄문에 일관된 생성 및 관리 가능
- 동적 로딩 지원
      자바 애플리케이션은 여러 개의 객체가 서로 연결되어 실행되는데, 이 객체들은 클래스로부터 생성, 애플리케이션이 실행될 때 모든 객체가 생성되지 않고, 객체가 필요한 시점에 클래스를 동적 로딩해서 객체를 생성, 개발 완료 후 유지보수가 발생하더라도 해당 클래스만 수정하면 되므로 전체 애플리케이션을 다시 컴파일할 필요가 없음 즉, 유지보수를 쉽고 빠르게 진행 가능
- 오픈소스 라이브러리 풍부
      자바는 오픈소스 언어이고 자바를 이용해서 전 세계에서 만들어진 라이브러리들이 굉장히 많음, 참고한다면 시간과 비용 절약 가능, 또한 문제가 생기는 경우 찾아볼 수 있는 레퍼런스들도 많음
자바 접근 제한자(접근 지정자)
Public : 같은 프로젝트 내 어디든 사용가능
Protected : 같은 패키지 내, 다른 패키지에서 상속 받아 자손클래스에서 접근 가능
Default : 같은 패키지 내에서만 접근 가능
Private : 같은 클래스 내에서만 접근 가능
객체지향언어
객체 : 데이터의 분산을 막기 위해 데이터와 기능을 하나로 묶은 그룹
겍체지향언어 : 객체를 만들고 객체를 사용하는 프로그래밍 방법, 다수의 객체를 만들고 이들이 서로 상호작용을 통해 프로그램을 만듦
특징
- 캡슐화 : 데이터와 코드의 형태를 외부로부터 알 수 없게 하고, 데이터의 구조와 역할, 기능을 하나의 캡슐형태로 만드는 방법 이는 class를 통해 구현, 인스턴스 생성을 통해 클래스 안의 멤버변수, 메서드에 쉽게 접근, 캡슐화를 통해 정보 은닉, 모듈 간의 결합도를 떨어뜨려 유연함과 유지보수성 높임
- 상속 : 상위 클래스의 모든걸 하위 클래스가 모두 이어 받는 것, 상속을 통해 캡슐화를 유지하면서 클래스의 재사용을 가능토록 함
- 다형성 : 한 객체가 다른 여러형태로 재구성되는 것
- 추상화 : 객체의 공통적인 속성과 기능을 추출하여 정의하는 것
장점
- 재사용성 : 상속을 통해 프로그래밍시 코드의 재사용을 높일 수 있음
- 생산성 향상 : 잘 설계된 클래스를 만들어서 독립적인 객체를 사용함으로써 개발의 생산성을 향상시킬 수 있음
- 자연적인 모델링 : 일상생활의 구조가 객체에 자연스럽게 녹아들어 있기 때문에 자연스럽게 구현 가능
- 유지보수의 우수성 : 프로그램 수정시 추가, 수정을 하더라도 캡슐화를 통해 주변 영향이 적기 떄문에 유지보수가 쉬어서 매우 경제적
단점
- 개발 속도 느림 : 객체가 처리하려는 것에 대한 정확한 이해가 필요해 설계단계부터 많은 시간 소모
- 실행속도 느림 
- 코딩난이도 상승 : 복잡하기 때문
오버로딩과 오버라이딩
자바에서 다형성을 지원하는 방법으로 메소드 오버로딩과 오버라이딩이 있음
오버로딩 : 같은 이름의 함수를 여러개 정의하고, 매개변수의 유형과 개수를 다르게 하여 다양한 유형의 호출에 응답하게 하는 것
오버라이딩 : 상위 클래스가 가지고 있는 멤버변수가 하위 클래스로 상속되는 것처럼 상위 클래스가 가지고 있는 메소드도 하위 클래스로 상속되어 하위 클래스에서 사용할 수 있다. 하지만 하위클래스에서 메소드를 재정의해서 사용할 수 있다.
상속 관계에 있는 클래스 간에 같은 이름의 메소드를 정의하는 기술
파이썬 
직관적이고 간결한 문법으로 최근 가장 주목을 받는 언어
스크립트 언어 : 컴파일 과정 없이 인터프리터가 소스 코드 한 줄씩 읽어들여 곧바로 실행하는 스크립트 언어 => 실행결과를 바로 확인하고 수정하면서 손쉽게 코드 작성 => 느린 실행속도
동적 타이핑 : 변수의 자료형을 지정하지 않고 단순히 선언하는 것만으로 값을 지정 가능, 변수의 자료형은 코드가 실행되는 시점에 결정 => 코드 실행 도중 예상하지 못한 타입으로 인한 에러 발생 가능
플랫폼 독립적 : 대부분의 운영체제에서 모두 동작, 운영체제별로 컴파일할 필요가 없기 때문에 한 번 소스 코드를 작성하면 어떤 운영체제에서든 활용 가능
컴파일 언어 스크립트 언어 차이점
컴파일언어는 컴파일이라는 과정을 통해 인간이 작성한 코드를 기계어로 번역해 실행하는 언어, 소스코드를 컴파일하는 과정을 거쳐야 하므로 비교적 많은 시간 소요하지만 한 번 기계어로 번역되면 빠른 실행 속도를 보여줌
스크립트언어는 별도의 컴파일 과정 없이 인터프리터가 소스 코드 한 줄 씩 읽어가며 바로 실행하는 언어, 컴파일 없이 곧바로 실행하므로 결과를 바로 확인하고 빠르게 수정할 수 있지만, 번역과 실행이 동시에 이뤄져 컴파일 언어보다 느린 실행속도를 보임
파이썬 느린 이유
파이썬이 느린 이유는 번역과 실행이 동시에 이뤄지는 스크립트언어이기 때문에 컴파일 언어보다 느린 실행속도를 보인다.
자바 유지보수 확장성 뛰어난 이유 
객체지향언어의 특징인 다형성을 통해 확장성이 뛰어남
캡슐화를 통해 유지보수가 뛰어남 => 모듈간 결합도를 낮춤으로 유지보수할때 주변영향이 적음
알고리즘
스프링 장점 
UDP TCP 차이
TCP는 양방향 연결형 프로토콜, 신뢰성 있는 경로를 확립하고 메시지 전송을 감독, 순서 제어, 오류 제어 흐름 제어 기능을 한다.
 
UDP 비연결형 프로토콜로 실시간 전송에 유리하며, TCP에 비해 단순한 헤더 구조를 가지므로 오버헤드가 적고 흐름제어나 순서 제어가 없어서 전송속도가 빠름, 신뢰성 보단 빠른 속도를 필요로 하는 경우 사용
OSI 7계층
물 데 네 전 세 표 응
물리 계층 - 데이터 링크 계층 - 네트워크 계층 - 전송 계층 - 세션 계층 - 표현 계층 - 응용 계층 
데드락(교착상태)
시스템 자원에 대한 요구가 뒤엉킨 상태 즉, 둘 이상의 프로세스가 다른 프로세스가 점유하고 있는 자원을 서로 기다릴 때 무한대기에 빠지는 상황
발생조건
- 상호 배제 : 한 번에 프로세스 하나만 해당 자원을 사용할 수 있다. 사용 중인 자원을 다른 프로세스가 사용하려면 요청한 자원이 해제될 때까지 기다려야 한다.
- 점유 대기 : 자원을 최소한 하나 보유하고, 다른 프로세스에 할당된 자원을 점유하기 위해 대기하는 프로세스가 존재해야 한다.
- 비선점 : 이미 할당된 자원을 강제로 빼앗을 수 없다.
- 순환 대기 : 대기 프로세스의 집합이 순환 형태로 자원을 대기하고 있어야 한다.
데드락 예방
- 자원의 상호 배제 조건 방지 : 한 번에 여로 프로세스가 공유 자원을 사용할 수 있게 합니다.
- 점유 대기 조건 방지 : 프로세스 실행에 필요한 모든 자원을 한꺼번에 요구하고 허용할 때까지 작업을 보류해서, 나중에 또다른 자원을 점유하기 위한 대기 조건을 성립하지 않도록 합니다.
- 비 선점 조건 방지 : 이미 다른 프로세스에게 할당된 자원이 선점권이 없다고 가정할 때, 높은 우선순위의 프로세스가 해당 자원을 선점할 수 있도록 합니다.
- 순환 대기 조건 방지 : 자원을 순환 형태로 대기하지 않도록 일정한 한 쪽 방향으로만 자원을 요구할 수 있도록 합니다.
4가지 조건 중 하나 이상을 방지
프로세스 스레드
프로세스 : 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램
스레드 : 프로세스 내에서 실행되는 여러 흐름의 단위
스케쥴링 종류와 각 예시 
비선점 스케쥴링과 선점 스케쥴링이 있음
비선점 스케쥴링 : 어떤 프로세스가 자원을 할당받으면 프로세스가 종료될 때 까지 실행되도록 보장
Ex) FCFS(First Come, First Serve), SJF(Shortest Job First)
선점 스케쥴링 : OS가 나서서 자원을 선점하고 특정 요건에 따라 각 프로세스에 요청이 있을 때 프로세스에게 분배하는 방식
Ex) 라운드 로빈, SRT(Shortest Remaining Time)
스택 , 큐 차이 
스택은 가장 먼저 들어온 요소가 가장 마지막에 나간다.(LIFO, Last In First Out)
큐는 가장 먼저 들어온 요소가 가장 먼저 나간다. (FIFO, First In First Out)
VBA 장단점 (Excel에 내가 원하는 기능을 Visual Basic 프로그래밍 언어로 추가할수 있게해주는 도구)
장점 : 간단한 개발환경, 쉬운 프로그래밍
단점 : 보안에 취약, 엑셀에서 제공되는 Editor만 사용가능
셀레니움 라이브러리
인터넷 익스플로어, 크롬과 같은 브라우저를 컨트롤 할 수 있게해주는 라이브러리
POI 라이브러리
엑셀을 다룰수 있게해주는 라이브러리
DFS(깊이 우선 탐색) BFS(너비 우선 탐색)
DFS : 최대한 깊이 내려간 뒤 더이상 깊이 갈 곳이 없을 때 옆으로 이동
BFS : 최대한 넓게 이동한 다음 더이상 갈 수 없을 때 아래로 이동
재귀 장단점 (ex. 피보나치수열, 팩토리얼 연산) ( 자신을 재참조하는 함수 )
장점 : 이해하기 쉽다, 변수 사용을 줄여준다
단점 : 성능 문제가 가장 큼, 시간복잡도 계산이 어렵다, 반복문보다 큰 오버헤드를 가진다, 
종결조건이 확실하지 않으면 무한반복이 일어나 CPU 크래쉬를 초래한다
재귀함수의 단점 해결 방법 : 꼬리 재귀 (리턴에 연산이 없는 경우에만 가능)
호출 당한 함수의 결과 -> 호출한 함수의 결과
폭포수 애자일
폭포수 : 절차적인 기법
단계검증, 
하향식접근(전 단계의 작업이 마무리되어야 다음 진행), 
피드백(결함 발견시 전단계로 돌아감)
애자일 : 고객과의 의사소통을 중시하는 기법
스프린트를 통한 반복개발로 스프린트가 끝날때마다 함께 모여 리뷰하고
피드백을 주고받는 형태로 진행
클린코딩 리팩토리
클린코드 : 가독성이 높은 코드를 말함 ( 변수명이 잘 선언, 오류 없어야함, 중복 없어야함, 의존성 줄여야함,
클래스 혹은 메소드가 한가지 일만 처리해야함)
리팩토링 : 프로그램의 외부 기능은 그대로 둔 채 내부의 코드를 정리하면서 개선하는 것
MVC 모델 (Model, View, Controller)
Model : 데이터
View : 인터페이스 요소
Controller : 이벤트 처리
싱글톤
객체의 인스턴스가 오직 1개만 생성되는 패턴
정규화 : 중복을 최소화
반정규화 : 읽는 시간을 최적화 -> joing 연산 비용 감소
REST API : 자원을 이름으로 구분하여 해당 자원의 상태를 주고 받는 모든 것을 의미
CRUD Operation : Create - POST, Read - GET, Update = PUT/PATCH, Delete = DELETE
REST 구성요소 - 자원, 자원에대한 행위, 자원에대한 행위의 내용
REST 특징 - 서버클라이언트 구조, 무상태, 캐시처리가능, 계층화, 인터페이스 일관성
REST 장단점
장점 : HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라를 구축할 필요가 없다
        HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해준다
        HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능
        Hypermedia API의 기본을 충실히 지키면서 범용성을 보장
        REST API 메세지가 의도하는 바를 명확하게 나타내므로 의도하는 바를 쉽게 파악할 수 있다
        여러 가지 서비스 디자인에서 생길 수 있는 문제를 최소화한다
        서버와 클라이언트의 역할을 명확하게 분리 한다
단점 : 표준 자체가 존재하지 않아 정의가 필요하다
        사용할 수 있는 메소드가 4가지 밖에 없다
        HTTP Method 형태가 제한적이다
        브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠수 있는 URL보다 Header 정보의 값을 처리해야 하므로 전문성이 요구된다
        구형 브라우저에서 호환이 되지 않아 지원해주지 못하는 동작이 많다(익스플로어)
        
UI/UX설계 모델링
UI : 사용자가 제품/서비스르 사용할 때 마주하게 되는 면
UX : 사용자 경험의 약자로 사용자가 어떠한 서비스/제품을 직간접적으로 이용하면서 느끼는 종합적인 만족
포트포워딩/NAT
NAT : 네트워크 주소 변환으로 IP 패킷의 출발지, 목적지 IP 주소와 TCP또는 UDP의 포트 번호를 재 기록하면서 라우터와 같은 네트워크 장치를 통해 네트워크 통신하는 기술
포트포워딩 : NAT를 수행하는 장치에서 설정하면 특정 포트를 Open하고 해당 포트로 들어오는 모든 패킷을 내부의 사설 IP로 전달해주는 기능
마이데이터 : 정보주체인 개인이 본인의 정보를ㄹ 적극적으로 관리, ㅇ통제하고 이를 신용관리 자산관리 나아가 건강관리까지 개인 생활에 능동적으로 활용하는 일련의 과정
오픈소스 : 공개적으로 액세스할 수 있게 설계되어 누구나 자유롭게 확인, 수정, 배포할 수 있는 코드
오픈소스 PR : PR이란 Pull&Request로 해당 소스에 기여한 것이 있으니 작업 브랜치 검토후 합쳐 달라고 요구하는것
퀵정렬 : 불안정 정렬에 속하며 배열 가운데서 하나의 원소(피벗을) 고른 뒤 피벗을 기준으로 작은 값 큰 값 2개의 배열로 나누는것 이후 분할된 배열에대해 재귀적으로 이 과정 반복
불안정 정렬 : 정렬시 중복값에 순서가 변경 될 수 있는 정렬
클라우드 : 인터넷 상의 가상화된 서버에 프로그램을 두고 필요할때마다 컴퓨터나 스마트폰 등에 불러와 사용하는 서비스
수직확장 : 하드웨어를 기준으로 하드웨어의 사양을 늘리는 것
수평확장 : 하드웨어는 그대로 두고 장비를 추가하여 소프트웨어적으로 하나처럼 묶는 것
디지털트렌스포메이션 : 아날로그 프로세스를 디지털로 전환 ex) 스마트 워치, AI 비서 등등
인프라클라우드 : 클라우드 컴퓨팅을 구현하는데 필요한 하드웨어와 소프트웨어 요소의 모음 여기에는 컴퓨팅 전력 네트워킹, 스토리지와 더불어 가상화된 리소스에 액세스하기 위한 사용자 인터페이스가 포함
협업 : 파트너십이자 통합이고 무언가를 서로 함께 생산하거나 만드는 행위
추상클래스와 인터페이스
추상화를 구현하기 위해 추상클래스와 인터페이스 사용
추상클래스는 abstract
인터페이스는 interface
추상 클래스는 추상 메소드 뿐만 아니라 생성자, 필드, 일반 메소드도 포함될 수 있음, 인터페이스는 오로지 추상메소드와 상수만을 포함
자바는 클래스를 통한 다중 상속을 지원하지 않지만 클래스와 인터페이스를 통한 다중 상속을 지원하기 때문에 인터페이스를 사용
추상클래스나 인터페이스에 구현한 추상 메소드들은 상속받는 클래스들에게 강제성을 부여 -> 오버라이딩하여 사용해야만 함
정렬 알고리즘
- 선택 정렬 : 처리 되지 않은 데이터 중 가장 작은 값을 선택해 맨 앞에 있는 데이터와 바꾸는 것을 반복해 정렬 (시간 복잡도 : O(N^2))
- 삽입 정렬 : 처리 되지 않은 데이터를 하나 골라 적절한 위치에 삽입해 정렬 (시간 복잡도 : O(N^2))
- 버블 정렬 : 서로 인접한 두 원소를 비교하여 정렬 1회전이 끝나면 가장 큰 값이 가장 뒤에 위치함, 다음 회전 부터는 마지막 인덱스는 비교하지 않음 (시간 복잡도 : O(N^2))
- 퀵정렬 : 기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꿔 정렬 (시간 복잡도 : 평균 - O(NLogN) 최악 - O(N^2))
탐색 알고리즘
- 선형 탐색 : 첫 번째 인덱스 부터 순서대로 하나씩 탐색 O(N)
- 이진 탐색 : 정렬되어 있는 리스트에 적용 가능 중간 값을 구하고 구하고자 하는 값과 비교 후 탐색 범위를 좁힘
배열, 리스트 차이
배열 : 인덱스를 가진 데이터의 집합
리스트 : 인덱스 없이 순차적으로 저장된 데잍터의 집합
배열 장점 : 인덱스를 통한 검색이 용이, 연속적이므로 메모리 관리가 편함
배열 단점 : 한 데이터를 삭제하더라도 배열은 연속해야하므로 공간이 남는다. 메모리 낭비, 정적이므로 배열의 크기를 컴파일 이전에 정해줘야함, 컴파일 이후 배열의 크기를 바꿀 수 없다
리스트 장점 : 포인터를 통해 다음 위치의 요소를 가르키고있어 삽입 삭제가 용이하다. 동적이므로 크기가 정해져있지 않음, 메모리 재사용, 관리가 편리
리스트 단점 : 검색 성능이 좋지 않음, 포인터를 통해 다음 요소를 가르킴으로 추가적인 메모리 공간 발생
AWS rekognition, Translate 
AWS rekognition : AWS에서 제공하는 이미지, 비디오 분석 API , 객체 및 사물, 사람 얼굴 분석, 텍스트 분석
AWS Translate : 영어를 한국어로 번역해주는 서비스
배포
EC2 : 가상머신 인스턴스
아마존 EC2를 생성한 후 파일 질라를 이용해 서버파일을 올려 배포